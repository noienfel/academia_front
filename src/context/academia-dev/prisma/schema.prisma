generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Aluno {
  id             String      @db.VarChar(36) @id @default(uuid())
  nome           String
  email          String      @unique
  senha          String
  matriculado    Boolean     @default(false)
  saldo          Decimal     @db.Decimal(9,2) @default(0)
  treinos        Treino[]   
  pagamentos     Pagamento[]  
  depositos      Deposito[]
   @@map("alunos")
  }

model Treino{
  id             String       @db.VarChar(36) @id @default(uuid())
  nome           String
  descricao      String?
  alunoId        String
  aluno          Aluno        @relation(fields: [alunoId], references: [id]) 
  destaque       Boolean      @default(true)
  exercicios     Exercicio[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  admin         Admin?   @relation(fields: [adminId], references: [id])
  adminId       String?  @db.VarChar(36)
  ativo          Boolean      @default(true)


  @@map("treinos")
}

model Exercicio{
  id            String   @db.VarChar(36) @id @default(uuid())
  nome          String
  series        Int 
  repeticoes    Int
  treinoId      String
  treino        Treino   @relation(fields: [treinoId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  admin         Admin?   @relation(fields: [adminId], references: [id])
  adminId       String?  @db.VarChar(36)
   @@map("exercicios")
}

model Pagamento{
  id            String   @db.VarChar(36) @id @default(uuid())
  valor         Float       
  status        Status //pendente, pago, cancelado
  metodo        Metodo //cartao, pix, dinheiro
  alunoId       String
  aluno         Aluno @relation(fields: [alunoId], references: [id])
  data          DateTime @default(now())
  updatedAt     DateTime @updatedAt
   @@map("pagamentos")
}

model Admin{ 
  id            String          @db.VarChar(36) @id @default(uuid())
  nome          String          @db.VarChar(60) 
  email         String          @db.VarChar(40)
  senha         String          @db.VarChar(60)
  nivel         Int             @db.SmallInt @default(2)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  logs          Log[]
  exercicios    Exercicio[]
  treinos       Treino[]
  @@map("admins")
}


model Log {
  id            Int         @id @default(autoincrement())
  admin         Admin       @relation(fields: [adminId], references: [id])
  adminId       String      @db.VarChar(36)
  descricao     String      @db.VarChar(60)
  complemento   String      @db.VarChar(200)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@map("logs")
}

model Deposito { 
  id            String    @db.VarChar(36) @id @default(uuid())
  alunoId       String 
  metodo        Metodo
  aluno         Aluno     @relation(fields: [alunoId], references: [id])
  valor         Decimal   @db.Decimal(9, 2)
   @@map("depositos")
}


enum Status{
  PENDENTE
  PAGO
  CANCELADO
}
enum Metodo{
  CARTAO 
  PIX   
  DINHEIRO
}